                int x = random.Next(this.Width - width);

                using (Brush brush = new SolidBrush(Color.FromArgb(random.Next(256), random.Next(256), random.Next(256))))
                {
                    g.FillRectangle(brush, new Rectangle(x, y, width, height));
                }
            }

            if (random.Next(10) > 8)
            {
                g.DrawImage(InvertColors(screenCopy), Point.Empty);
            }

            for (int i = 0; i < 1000; i++)
            {
                int x = random.Next(this.Width);
                int y = random.Next(this.Height);

                Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
                using (Pen pen = new Pen(randomColor, 1))
                {
                    g.DrawRectangle(pen, x, y, 1, 1);
                }
            }
        }

        private Bitmap InvertColors(Bitmap bmp)
        {
            Bitmap invertedImage = new Bitmap(bmp.Width, bmp.Height);
            for (int y = 0; y < bmp.Height; y++)
            {
                for (int x = 0; x < bmp.Width; x++)
                {
                    Color pixelColor = bmp.GetPixel(x, y);
                    Color invertedColor = Color.FromArgb(pixelColor.A, 255 - pixelColor.R, 255 - pixelColor.G, 255 - pixelColor.B);
                    invertedImage.SetPixel(x, y, invertedColor);
                }
            }
            return invertedImage;
        }

        private void SetErrorCursor()
        {
            this.Cursor = Cursors.No; // Change cursor to error state
        }

        private void RestoreCursor()
        {
            this.Cursor = Cursors.Default; // Restore cursor to normal state
        }

        private void Gdi_FormClosed(object sender, FormClosedEventArgs e)
        {
            RestoreCursor(); // Restore cursor when form is closed
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                timer?.Dispose();
                screenCopy?.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
Summary
Setup Form: Customize the form to cover the entire screen, remove borders, and set a transparent background.
Apply Effects: Use timers to apply random visual distortions and effects to create a chaotic and hallucination-like appearance.
Handle Cursor: Change the cursor to indicate an error and restore it when the form is closed.
Dispose Resources: Ensure that all resources are properly disposed of when the application exits.
This guide and code should help you create a GDI-like application with visually disruptive effects. Make sure to use thi